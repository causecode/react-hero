import * as Radium from 'radium';
import * as React from 'react';
import {Link} from 'react-router-dom';
import {
    ControlLabel,
    FormGroup,
    Col,
    Button,
    Grid,
    FormInput,
    IInstancePageProps,
    BaseModel,
    store
} from 'react-hero';
import {<%= modelName.capitalize()%>Model} from '<%= modelPath%>';

export interface I<%= componentName.capitalize()%>PageProps extends IInstancePageProps {
    handleSubmit: (
        instance: <%= modelName.capitalize()%>Model,
        successCallBack?: ((response?: Axios.AxiosXHR<{message?: string}>) => void),
        failureCallBack?: (() => void),
    ) => void;
    handleDelete: (
        instance: <%= modelName.capitalize()%>Model,
        successCallBack?: ((response?: Axios.AxiosXHR<{message?: string}>) => void),
        failureCallBack?: (() => void),
    ) => void;
    instance: <%= modelName.capitalize()%>Model;
    isCreatePage: boolean;
}

@Radium
export class <%= componentName.capitalize()%>Page extends React.Component<I<%= componentName.capitalize()%>PageProps, void> {

    static resourceName: string = '<%= resourceName%>';

    fetchStoreInstance = (): <%= modelName.capitalize()%>Model => {
        let instance: <%= modelName.capitalize()%>Model = this.props.instance;
        let instanceKey: string = this.props.isCreatePage ?
                                    `${instance.resourceName}Create` : `${instance.resourceName}Edit`;
        instance.properties = store.getState().forms[`rhForms`][instanceKey].properties;
        return instance;
    }

    handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        // Not using connect here to avoid rerendering of component on change of instance properties.
        this.props.handleSubmit(this.fetchStoreInstance());
    }

    handleDelete = () => {
        if (this.props.handleDelete && this.props.handleDelete instanceof Function) {
            this.props.handleDelete(this.fetchStoreInstance());
        }
    }

    render(): JSX.Element {
        return (
            <form onSubmit={this.handleSubmit}>
            <Grid>
                <% _.keys(formControls).forEach(function (key) { %>
                <%= formControls[key]%>
                <% }) %>
                <FormGroup>
                    <Col sm={4} smOffset={3}>
                        <Button style={{margin: '0px 10px'}} bsStyle="primary" type="submit">
                            Update
                        </Button>
                        <Button style={{margin: '0px 10px'}} bsStyle="danger" onClick={this.handleDelete}>
                            Delete
                        </Button>
                        <Link style={{margin: '0px 10px'}} className="btn btn-default" to={'<%= cancelDestination%>'}>
                            Cancel
                        </Link>
                    </Col>
                </FormGroup>
                </Grid>
            </form>
        );
    }
};
